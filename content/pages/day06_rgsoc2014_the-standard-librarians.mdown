Date: 9 July, 2014
Author: Josh Loper

# Day 6 - Our First Story Completed!

We started work on our first story.  Jen, Stephanie, Wale and Josh met with Mike McCormick and John Ryan to begin work on our first day of TDD.

![John Ryan Explaining Git Workspaces](/attachments/070914-john-ryan_standard-librarians_feats-of-daring.jpg)

We started by creating an RSpec test in `spec/features/emerald_comes_to_the_site_spec.rb` to visit the root page. This returned a `RoutingError`. We modified the `config/routes.rb` file to have root 'home#index' which returned an `UninitializedConstant HomeController` error.  
This means that we need to create a controller called `home_controller.rb`.  
First, we wanted to write a test for the home controller so we created a new file `spec/controllers/home_controller_spec.rb`.  

Then we ran `$ rails generate controller home index`.  This generated many files, a lot of them we didn't need to use, except for the `app/controllers/home_controller.rb` and `app/views/index.html.erb`.  
We ran our tests again with the return of `missing the text "Adventure 1"`. We added the "Adventure 1" text to the `index.html.erb` and our test passed.

##  Fun with Git

Git has 3 different workspaces, one is your "working directory", which is the current folder you are in, the second is "staging" or "index" which is the files which have been added via "git add filename".  Finally, the last workspace is the actual commit which is like the actual repo itself.

We added our files to our git repository by individually adding our files instead of using `$ git add .`
We ran `$ git diff --cached` which shows all of the code changes in "staging", and `$ git status` which shows which files are being added to staging before commit.
`$ git diff --cached` helped us catch several things in our code we did not want to commit like blank spaces and lines.

We talked about [writing a good commit message](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html). The heading is only 50 characters long so you should write what the intention of your commit is. You can imagine these words in front of your commit message: "This commit adds the software and related tests to:" ____ (commit message) ____.
